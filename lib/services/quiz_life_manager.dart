import 'life_sync_service.dart';
import 'package:flutter/foundation.dart';

/// Service pour g√©rer la consommation des vies pendant un quiz
/// 
/// Ce service :
/// - V√©rifie les vies avant de lancer un quiz
/// - Consomme les vies en cas d'erreur
/// - Synchronise les vies apr√®s le quiz
class QuizLifeManager {
  static int _livesLost = 0;
  static bool _quizStarted = false;

  /// V√©rifie si l'utilisateur peut lancer un quiz
  /// 
  /// [uid] : ID de l'utilisateur
  /// 
  /// Retourne true si le quiz peut √™tre lanc√©, false sinon
  static Future<bool> canStartQuiz(String uid) async {
    try {
      if (kDebugMode) debugPrint('üîÑ V√©rification des vies avant le lancement du quiz');
      
      final canStart = await LifeSyncService.syncLivesBeforeQuiz(uid);
      
      if (canStart) {
        _quizStarted = true;
        _livesLost = 0;
        if (kDebugMode) debugPrint('‚úÖ Quiz autoris√© - D√©marrage');
      } else {
        if (kDebugMode) debugPrint('‚ùå Quiz refus√© - Plus de vies disponibles');
      }
      
      return canStart;
    } catch (e) {
      if (kDebugMode) debugPrint('‚ùå Erreur lors de la v√©rification des vies: $e');
      // En cas d'erreur, permettre l'acc√®s au quiz pour √©viter de bloquer l'utilisateur
      _quizStarted = true;
      _livesLost = 0;
      return true;
    }
  }

  /// Consomme une vie en cas d'erreur dans le quiz
  /// 
  /// Cette m√©thode :
  /// - Incr√©mente le compteur de vies perdues
  /// - Ne consomme pas imm√©diatement dans Firestore (attendre la fin du quiz)
  static void loseLife() {
    if (_quizStarted) {
      _livesLost++;
      if (kDebugMode) debugPrint('üíî Vie perdue - Total perdues: $_livesLost');
    }
  }

  /// Finalise le quiz et synchronise les vies
  /// 
  /// [uid] : ID de l'utilisateur
  /// 
  /// Cette m√©thode :
  /// - Synchronise les vies perdues dans Firestore
  /// - Remet √† z√©ro les compteurs internes
  static Future<void> finishQuiz(String uid) async {
    try {
      if (_quizStarted) {
        if (kDebugMode) debugPrint('üîÑ Finalisation du quiz - Vies perdues: $_livesLost');
        
        // Synchroniser les vies perdues
        await LifeSyncService.syncLivesAfterQuiz(uid, _livesLost);
        
        // Remettre √† z√©ro les compteurs
        _livesLost = 0;
        _quizStarted = false;
        
        if (kDebugMode) debugPrint('‚úÖ Quiz finalis√© avec succ√®s');
      }
    } catch (e) {
      if (kDebugMode) debugPrint('‚ùå Erreur lors de la finalisation du quiz: $e');
      // Remettre √† z√©ro les compteurs m√™me en cas d'erreur
      _livesLost = 0;
      _quizStarted = false;
    }
  }

  /// Annule le quiz sans consommer de vies
  /// 
  /// Cette m√©thode :
  /// - Remet √† z√©ro les compteurs sans synchroniser
  /// - Utile quand l'utilisateur quitte le quiz volontairement
  static void cancelQuiz() {
    if (kDebugMode) debugPrint('üîÑ Annulation du quiz - Aucune vie consomm√©e');
    _livesLost = 0;
    _quizStarted = false;
  }

  /// R√©cup√®re le nombre de vies perdues pendant le quiz actuel
  /// 
  /// Retourne le nombre de vies perdues
  static int getLivesLost() {
    return _livesLost;
  }

  /// V√©rifie si un quiz est en cours
  /// 
  /// Retourne true si un quiz est en cours, false sinon
  static bool isQuizActive() {
    return _quizStarted;
  }

  /// Force la r√©initialisation des compteurs (debug)
  /// 
  /// Cette m√©thode est utile pour le d√©bogage
  static void reset() {
    if (kDebugMode) debugPrint('üîÑ R√©initialisation forc√©e des compteurs de quiz');
    _livesLost = 0;
    _quizStarted = false;
  }
} 