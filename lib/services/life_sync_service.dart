import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/foundation.dart';

class LifeSyncService {
  static final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  static final FirebaseAuth _auth = FirebaseAuth.instance;

  /// V√©rifie que l'utilisateur est authentifi√© et que l'UID correspond
  /// 
  /// [uid] : ID de l'utilisateur √† v√©rifier
  /// Retourne true si l'authentification est valide
  static bool _validateAuthentication(String uid) {
    final currentUser = _auth.currentUser;
    if (currentUser == null) {
      if (kDebugMode) {
        debugPrint('‚ùå Erreur d\'authentification: Aucun utilisateur connect√©');
      }
      return false;
    }
    
    if (currentUser.uid != uid) {
      if (kDebugMode) {
        debugPrint('‚ùå Erreur d\'authentification: UID ne correspond pas (connect√©: ${currentUser.uid}, demand√©: $uid)');
      }
      return false;
    }
    
    return true;
  }

  /// Obtient une r√©f√©rence s√©curis√©e au document utilisateur
  /// 
  /// [uid] : ID de l'utilisateur
  /// Retourne la r√©f√©rence du document ou null si l'authentification √©choue
  static DocumentReference? _getSecureUserDocument(String uid) {
    if (!_validateAuthentication(uid)) {
      return null;
    }
    
    return _firestore.collection('utilisateurs').doc(uid);
  }

  /// Synchronise les vies restantes avec Firestore apr√®s un quiz
  /// 
  /// [uid] : ID de l'utilisateur
  /// [livesRemaining] : Nombre de vies restantes (sera clamp√© entre 0 et 5)
  static Future<void> syncLivesAfterQuiz(String uid, int livesRemaining) async {
    // Mode vies infinies: ne pas synchroniser de d√©cr√©ment
    try {
      final userDocRef = _getSecureUserDocument(uid);
      if (userDocRef != null) {
        final snap = await userDocRef.get();
        final data = snap.data() as Map<String, dynamic>?;
        if ((data?['livesInfinite'] ?? false) == true) {
          if (kDebugMode) debugPrint('‚ôæÔ∏è Mode vies infinies actif: synchronisation ignor√©e');
          return;
        }
      }
    } catch (_) {}
    const maxRetries = 3;
    int retryCount = 0;
    
    while (retryCount < maxRetries) {
      try {
        // Clamper la valeur entre 0 et 5
        final clampedLives = livesRemaining.clamp(0, 5);
        
        if (kDebugMode) {
          debugPrint('üîÑ Synchronisation des vies restantes: $clampedLives pour l\'utilisateur $uid (tentative ${retryCount + 1}/$maxRetries)');
          debugPrint('   - Vies re√ßues: $livesRemaining');
          debugPrint('   - Vies apr√®s clamp: $clampedLives');
        }

        // Obtenir une r√©f√©rence s√©curis√©e au document utilisateur
        final userDoc = _getSecureUserDocument(uid);
        if (userDoc == null) {
          throw Exception('Erreur d\'authentification: Impossible d\'acc√©der au document utilisateur');
        }

        // √âcrire directement la valeur des vies restantes dans Firestore
        await userDoc.set({
          'livesRemaining': clampedLives,
          'lastLifeUsedAt': FieldValue.serverTimestamp(),
          'lastUpdated': FieldValue.serverTimestamp(),
        }, SetOptions(merge: true));

        if (kDebugMode) {
          debugPrint('‚úÖ Vies restantes synchronis√©es avec Firestore: $clampedLives vies pour l\'utilisateur $uid');
        }
        return; // Succ√®s, sortir de la boucle
      } catch (e) {
        retryCount++;
        if (kDebugMode) {
          debugPrint('‚ùå Erreur lors de la synchronisation des vies restantes (tentative $retryCount/$maxRetries): $e');
          debugPrint('   - Stack trace: ${e.toString()}');
        }
        
        if (retryCount >= maxRetries) {
          if (kDebugMode) {
            debugPrint('‚ùå √âchec apr√®s $maxRetries tentatives de synchronisation');
          }
          rethrow; // Relancer l'erreur apr√®s √©chec de toutes les tentatives
        } else {
          // Attendre avant de r√©essayer (backoff exponentiel)
          await Future.delayed(Duration(milliseconds: 500 * retryCount));
        }
      }
    }
  }

  /// Obtient le nombre de vies perdues depuis Firestore
  static Future<int> getLivesLost(String uid) async {
    try {
      // Obtenir une r√©f√©rence s√©curis√©e au document utilisateur
      final userDoc = _getSecureUserDocument(uid);
      if (userDoc == null) {
        if (kDebugMode) {
          debugPrint('‚ùå Erreur d\'authentification lors de la r√©cup√©ration des vies perdues');
        }
        return 0; // Fallback
      }

      DocumentSnapshot userDocSnapshot = await userDoc.get();
      
      if (userDocSnapshot.exists) {
        final data = userDocSnapshot.data() as Map<String, dynamic>?;
        return data?['livesLost'] ?? 0;
      }
      
      return 0;
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå Erreur lors de la r√©cup√©ration des vies perdues: $e');
      }
      return 0;
    }
  }

  /// Obtient le nombre de vies actuelles de l'utilisateur
  /// Retourne le nombre de vies restantes depuis Firestore
  static Future<int> getCurrentLives(String uid) async {
    try {
      // Obtenir une r√©f√©rence s√©curis√©e au document utilisateur
      final userDoc = _getSecureUserDocument(uid);
      if (userDoc == null) {
        if (kDebugMode) {
          debugPrint('‚ùå Erreur d\'authentification lors de la r√©cup√©ration des vies');
        }
        return 5; // Fallback
      }

      DocumentSnapshot userDocSnapshot = await userDoc.get();
      
      if (userDocSnapshot.exists) {
        final data = userDocSnapshot.data() as Map<String, dynamic>?;
        if ((data?['livesInfinite'] ?? false) == true) {
          if (kDebugMode) debugPrint('‚ôæÔ∏è getCurrentLives: mode vies infinies ‚Üí retour 5 (affichage)');
          return 5; // Affichage stable
        }
        final livesRemaining = data?['livesRemaining'] ?? 5;
        
        // S'assurer que le nombre de vies est valide
        return (livesRemaining as int).clamp(0, 5);
      }
      
      // Si le document n'existe pas, retourner 5 vies par d√©faut
      return 5;
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå Erreur lors de la r√©cup√©ration des vies actuelles: $e');
      }
      // Fallback √† 5 vies en cas d'erreur
      return 5;
    }
  }

  /// Obtient l'ID de l'utilisateur actuel
  static String? getCurrentUserId() {
    return _auth.currentUser?.uid;
  }

  /// V√©rifie si un utilisateur est connect√©
  static bool get isUserLoggedIn {
    return _auth.currentUser != null;
  }

  /// V√©rifie et r√©initialise les vies √† 5 si un nouveau jour est commenc√©
  /// 
  /// [uid] : ID de l'utilisateur
  /// Retourne le nombre de vies actuelles (apr√®s r√©initialisation si n√©cessaire)
  static Future<int> checkAndResetLives(String uid) async {
    const maxRetries = 3;
    int retryCount = 0;
    
    while (retryCount < maxRetries) {
      try {
        if (kDebugMode) {
          debugPrint('üîÑ V√©rification de la r√©initialisation quotidienne pour l\'utilisateur $uid (tentative ${retryCount + 1}/$maxRetries)');
        }

        // Obtenir une r√©f√©rence s√©curis√©e au document utilisateur
        final userDoc = _getSecureUserDocument(uid);
        if (userDoc == null) {
          throw Exception('Erreur d\'authentification: Impossible d\'acc√©der au document utilisateur');
        }

        // Lire les donn√©es actuelles de l'utilisateur
        DocumentSnapshot userDocSnapshot = await userDoc.get();
        
        if (!userDocSnapshot.exists) {
          if (kDebugMode) {
            debugPrint('‚ö†Ô∏è Document utilisateur inexistant, cr√©ation avec 5 vies');
          }
          
          // Si le document n'existe pas, cr√©er avec 5 vies
          await userDoc.set({
            'livesRemaining': 5,
            'dailyResetDate': DateTime(DateTime.now().year, DateTime.now().month, DateTime.now().day),
            'lastUpdated': FieldValue.serverTimestamp(),
          }, SetOptions(merge: true));
          
          if (kDebugMode) {
            debugPrint('‚úÖ Document utilisateur cr√©√© avec 5 vies pour l\'utilisateur $uid');
          }
          return 5;
        }

        final data = userDocSnapshot.data() as Map<String, dynamic>?;
        if ((data?['livesInfinite'] ?? false) == true) {
          if (kDebugMode) debugPrint('‚ôæÔ∏è checkAndResetLives: vies infinies actives ‚Üí aucune r√©initialisation');
          return 5;
        }
        final currentLives = (data?['livesRemaining'] ?? 5) as int;
        
        if (kDebugMode) {
          debugPrint('üìä Donn√©es utilisateur r√©cup√©r√©es:');
          debugPrint('   - Vies actuelles dans Firestore: $currentLives');
          debugPrint('   - Donn√©es compl√®tes: $data');
        }
        
        // R√©cup√©rer la date de derni√®re r√©initialisation
        final dailyResetDate = data?['dailyResetDate'] as Timestamp?;
        final lastResetDate = dailyResetDate?.toDate().toLocal() ?? DateTime.now().toLocal();
        
        // Date d'aujourd'hui √† minuit
        final todayMidnight = DateTime(DateTime.now().year, DateTime.now().month, DateTime.now().day);
        
        if (kDebugMode) {
          debugPrint('üìÖ Dates de r√©initialisation:');
          debugPrint('   - Derni√®re r√©initialisation: $lastResetDate');
          debugPrint('   - Aujourd\'hui minuit: $todayMidnight');
          debugPrint('   - Nouveau jour d√©tect√©: ${lastResetDate.isBefore(todayMidnight)}');
        }
        
        // V√©rifier si on est pass√© √† un nouveau jour
        if (lastResetDate.isBefore(todayMidnight)) {
          if (kDebugMode) {
            debugPrint('üîÑ Nouveau jour d√©tect√©, r√©initialisation des vies √† 5 pour l\'utilisateur $uid');
          }
          
          // R√©initialiser les vies √† 5 et mettre √† jour la date
          await userDoc.set({
            'livesRemaining': 5,
            'dailyResetDate': todayMidnight,
            'lastUpdated': FieldValue.serverTimestamp(),
          }, SetOptions(merge: true));
          
          if (kDebugMode) {
            debugPrint('‚úÖ Vies r√©initialis√©es √† 5 pour l\'utilisateur $uid');
          }
          return 5;
        } else {
          if (kDebugMode) {
            debugPrint('‚úÖ Pas de r√©initialisation n√©cessaire, vies actuelles: $currentLives pour l\'utilisateur $uid');
          }
          return currentLives.clamp(0, 5);
        }
      } catch (e) {
        retryCount++;
        if (kDebugMode) {
          debugPrint('‚ùå Erreur lors de la v√©rification/r√©initialisation des vies (tentative $retryCount/$maxRetries): $e');
          debugPrint('   - Stack trace: ${e.toString()}');
        }
        
        if (retryCount >= maxRetries) {
          if (kDebugMode) {
            debugPrint('‚ùå √âchec apr√®s $maxRetries tentatives, utilisation du fallback');
          }
          // En cas d'erreur persistante, retourner 5 vies par d√©faut
          return 5;
        } else {
          // Attendre avant de r√©essayer (backoff exponentiel)
          await Future.delayed(Duration(milliseconds: 500 * retryCount));
        }
      }
    }
    
    // Fallback final
    return 5;
  }

  /// V√©rifie la coh√©rence des vies et corrige si n√©cessaire
  /// 
  /// [uid] : ID de l'utilisateur
  /// Retourne le nombre de vies corrig√©es
  static Future<int> verifyAndFixLives(String uid) async {
    try {
      if (kDebugMode) {
        debugPrint('üîç V√©rification de la coh√©rence des vies pour l\'utilisateur $uid');
      }

      // Obtenir une r√©f√©rence s√©curis√©e au document utilisateur
      final userDoc = _getSecureUserDocument(uid);
      if (userDoc == null) {
        if (kDebugMode) {
          debugPrint('‚ùå Erreur d\'authentification lors de la v√©rification de coh√©rence');
        }
        return 5; // Fallback
      }

      DocumentSnapshot userDocSnapshot = await userDoc.get();
      
      if (!userDocSnapshot.exists) {
        if (kDebugMode) {
          debugPrint('‚ö†Ô∏è Document utilisateur inexistant, cr√©ation avec 5 vies');
        }
        await userDoc.set({
          'livesRemaining': 5,
          'dailyResetDate': DateTime(DateTime.now().year, DateTime.now().month, DateTime.now().day),
          'lastUpdated': FieldValue.serverTimestamp(),
        }, SetOptions(merge: true));
        return 5;
      }

      final data = userDocSnapshot.data() as Map<String, dynamic>?;
      if ((data?['livesInfinite'] ?? false) == true) {
        if (kDebugMode) debugPrint('‚ôæÔ∏è verifyAndFixLives: vies infinies ‚Üí rien √† corriger');
        return 5;
      }
      final currentLives = (data?['livesRemaining'] ?? 5) as int;
      final correctedLives = currentLives.clamp(0, 5);
      
      if (currentLives != correctedLives) {
        if (kDebugMode) {
          debugPrint('‚ö†Ô∏è Incoh√©rence d√©tect√©e: $currentLives ‚Üí $correctedLives');
        }
        
        // Corriger les vies
        await userDoc.set({
          'livesRemaining': correctedLives,
          'lastUpdated': FieldValue.serverTimestamp(),
        }, SetOptions(merge: true));
        
        if (kDebugMode) {
          debugPrint('‚úÖ Vies corrig√©es: $correctedLives');
        }
      } else {
        if (kDebugMode) {
          debugPrint('‚úÖ Vies coh√©rentes: $correctedLives');
        }
      }
      
      return correctedLives;
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå Erreur lors de la v√©rification de coh√©rence: $e');
      }
      return 5; // Fallback
    }
  }

  /// Force la r√©initialisation des vies √† 5
  /// 
  /// [uid] : ID de l'utilisateur
  /// Retourne le nombre de vies apr√®s r√©initialisation
  static Future<int> forceResetLives(String uid) async {
    try {
      if (kDebugMode) {
        debugPrint('üîÑ R√©initialisation forc√©e des vies pour l\'utilisateur $uid');
      }

      // Obtenir une r√©f√©rence s√©curis√©e au document utilisateur
      final userDoc = _getSecureUserDocument(uid);
      if (userDoc == null) {
        throw Exception('Erreur d\'authentification: Impossible d\'acc√©der au document utilisateur');
      }

      await userDoc.set({
        'livesRemaining': 5,
        'dailyResetDate': DateTime(DateTime.now().year, DateTime.now().month, DateTime.now().day),
        'lastUpdated': FieldValue.serverTimestamp(),
      }, SetOptions(merge: true));
      
      if (kDebugMode) {
        debugPrint('‚úÖ Vies r√©initialis√©es √† 5 pour l\'utilisateur $uid');
      }
      
      return 5;
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå Erreur lors de la r√©initialisation forc√©e: $e');
      }
      return 5; // Fallback
    }
  }


} 