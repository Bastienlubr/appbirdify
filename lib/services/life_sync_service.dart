import 'package:cloud_firestore/cloud_firestore.dart';
import 'firestore_service.dart';
import 'package:flutter/foundation.dart';

/// Service centralis√© pour la synchronisation du syst√®me de vies
/// 
/// Ce service g√®re toute la logique de synchronisation entre Firestore et l'application
/// √† tous les moments cl√©s : entr√©e sur l'√©cran d'accueil, avant un quiz, apr√®s un quiz
class LifeSyncService {
  static final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  static final FirestoreService _firestoreService = FirestoreService();

  /// Synchronise les vies lors de l'entr√©e sur l'√©cran d'accueil
  /// 
  /// Cette m√©thode :
  /// - V√©rifie que le document utilisateur existe (via FirestoreService)
  /// - Appelle resetLivesIfNeeded(uid) pour remettre les vies √† 5 si la date est d√©pass√©e
  /// - Recharge les donn√©es de Firestore
  /// 
  /// [uid] : L'identifiant unique de l'utilisateur
  static Future<void> syncLivesOnHomeEntry(String uid) async {
    try {
      if (kDebugMode) debugPrint('üîÑ D√©but de la synchronisation des vies - Entr√©e sur l\'√©cran d\'accueil');
      
      // V√©rifier que le document utilisateur existe
      final documentCreated = await _firestoreService.createUserDocumentIfNeeded(uid);
      if (documentCreated) {
        if (kDebugMode) debugPrint('‚úÖ Document utilisateur cr√©√© lors de la synchronisation');
      }
      
      // Appeler resetLivesIfNeeded pour remettre les vies √† 5 si la date est d√©pass√©e
      await _firestoreService.resetLivesIfNeeded(uid);
      
      // Recharger les donn√©es de Firestore pour s'assurer de la synchronisation
      final currentLives = await _firestoreService.getLivesRemaining(uid);
      if (kDebugMode) debugPrint('‚úÖ Synchronisation termin√©e - Vies actuelles: $currentLives');
      
    } catch (e) {
      if (kDebugMode) debugPrint('‚ùå Erreur lors de la synchronisation des vies √† l\'entr√©e: $e');
      rethrow;
    }
  }

  /// Synchronise les vies avant de lancer un quiz
  /// 
  /// Cette m√©thode :
  /// - Recharge les donn√©es Firestore
  /// - V√©rifie si livesRemaining > 0
  /// - Retourne true si le quiz peut √™tre lanc√©, false sinon
  /// 
  /// [uid] : L'identifiant unique de l'utilisateur
  /// 
  /// Retourne true si le quiz peut √™tre lanc√©, false sinon
  static Future<bool> syncLivesBeforeQuiz(String uid) async {
    try {
      if (kDebugMode) debugPrint('üîÑ V√©rification des vies avant le lancement du quiz');
      
      // Recharger les donn√©es Firestore
      final livesRemaining = await _firestoreService.getLivesRemaining(uid);
      if (kDebugMode) debugPrint('üìä Vies restantes: $livesRemaining');
      
      // V√©rifier si livesRemaining > 0
      final canStartQuiz = livesRemaining > 0;
      
      if (canStartQuiz) {
        if (kDebugMode) debugPrint('‚úÖ Quiz autoris√© - Vies suffisantes');
      } else {
        if (kDebugMode) debugPrint('‚ùå Quiz refus√© - Plus de vies disponibles');
      }
      
      return canStartQuiz;
      
    } catch (e) {
      if (kDebugMode) debugPrint('‚ùå Erreur lors de la v√©rification des vies avant le quiz: $e');
      // En cas d'erreur, permettre l'acc√®s au quiz pour √©viter de bloquer l'utilisateur
      if (kDebugMode) debugPrint('‚ö†Ô∏è Acc√®s au quiz autoris√© par d√©faut en cas d\'erreur');
      return true;
    }
  }

  /// Synchronise les vies apr√®s la fin d'un quiz
  /// 
  /// Cette m√©thode :
  /// - Si livesLost > 0, appelle consumeLives(uid, livesLost) depuis FirestoreService
  /// - Met √† jour Firestore proprement m√™me si le quiz a √©t√© quitt√© en cours
  /// 
  /// [uid] : L'identifiant unique de l'utilisateur
  /// [livesLost] : Le nombre de vies perdues pendant le quiz
  static Future<void> syncLivesAfterQuiz(String uid, int livesLost) async {
    try {
      if (kDebugMode) debugPrint('üîÑ Synchronisation des vies apr√®s le quiz');
      
      if (livesLost > 0) {
        // Appeler consumeLives pour d√©cr√©menter les vies perdues
        final consumedLives = await _firestoreService.consumeLives(uid, livesLost);
        if (kDebugMode) debugPrint('üìâ Vies consomm√©es: $consumedLives sur $livesLost perdues');
        
        // R√©cup√©rer les vies restantes apr√®s consommation
        final remainingLives = await _firestoreService.getLivesRemaining(uid);
        if (kDebugMode) debugPrint('üìä Vies restantes apr√®s le quiz: $remainingLives');
      } else {
        if (kDebugMode) debugPrint('‚úÖ Aucune vie perdue - Synchronisation termin√©e');
      }
      
      if (kDebugMode) debugPrint('‚úÖ Synchronisation post-quiz termin√©e');
      
    } catch (e) {
      if (kDebugMode) debugPrint('‚ùå Erreur lors de la synchronisation post-quiz: $e');
      rethrow;
    }
  }

  /// M√©thode utilitaire pour obtenir les vies actuelles depuis Firestore
  /// 
  /// [uid] : L'identifiant unique de l'utilisateur
  /// 
  /// Retourne le nombre de vies restantes
  static Future<int> getCurrentLives(String uid) async {
    try {
      final lives = await _firestoreService.getLivesRemaining(uid);
      if (kDebugMode) debugPrint('üìä Vies actuelles r√©cup√©r√©es: $lives');
      return lives;
    } catch (e) {
      if (kDebugMode) debugPrint('‚ùå Erreur lors de la r√©cup√©ration des vies actuelles: $e');
      return 5; // Valeur par d√©faut en cas d'erreur
    }
  }

  /// M√©thode utilitaire pour forcer la r√©initialisation des vies (debug)
  /// 
  /// [uid] : L'identifiant unique de l'utilisateur
  /// [lives] : Le nombre de vies √† d√©finir (par d√©faut 5)
  static Future<void> forceResetLives(String uid, {int lives = 5}) async {
    try {
      if (kDebugMode) debugPrint('üîÑ R√©initialisation forc√©e des vies √† $lives');
      
      // Calculer aujourd'hui √† minuit
      DateTime today = DateTime.now();
      DateTime todayMidnight = DateTime(today.year, today.month, today.day);
      
      // Mettre √† jour le document Firestore
      await _firestore
          .collection('users')
          .doc(uid)
          .update({
        'livesRemaining': lives,
        'dailyResetDate': todayMidnight,
        'lastUpdated': FieldValue.serverTimestamp(),
      });
      
      if (kDebugMode) debugPrint('‚úÖ Vies r√©initialis√©es √† $lives');
      
    } catch (e) {
      if (kDebugMode) debugPrint('‚ùå Erreur lors de la r√©initialisation forc√©e des vies: $e');
      rethrow;
    }
  }

  /// M√©thode utilitaire pour v√©rifier l'√©tat de synchronisation
  /// 
  /// [uid] : L'identifiant unique de l'utilisateur
  /// 
  /// Retourne un Map avec les informations de synchronisation
  static Future<Map<String, dynamic>> getSyncStatus(String uid) async {
    try {
      final doc = await _firestore.collection('users').doc(uid).get();
      
      if (!doc.exists) {
        return {
          'exists': false,
          'livesRemaining': 5,
          'lastUpdated': null,
          'dailyResetDate': null,
        };
      }
      
      final data = doc.data();
      return {
        'exists': true,
        'livesRemaining': data?['livesRemaining'] ?? 5,
        'lastUpdated': data?['lastUpdated'],
        'dailyResetDate': data?['dailyResetDate'],
      };
      
    } catch (e) {
      if (kDebugMode) debugPrint('‚ùå Erreur lors de la r√©cup√©ration du statut de synchronisation: $e');
      return {
        'exists': false,
        'livesRemaining': 5,
        'lastUpdated': null,
        'dailyResetDate': null,
        'error': e.toString(),
      };
    }
  }
} 