import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/foundation.dart';
import 'dart:async';
import 'user_orchestra_service.dart';

/// Service d'authentification pour g√©rer la v√©rification continue de la connexion Firebase
class AuthService {
  static final FirebaseAuth _auth = FirebaseAuth.instance;

  // Abonnement persistant aux changements d'authentification
  static StreamSubscription<User?>? _authSubscription;

  /// Stream des changements d'√©tat d'authentification
  /// 
  /// Ce stream √©met un User? :
  /// - User : Utilisateur connect√©
  /// - null : Utilisateur d√©connect√©
  static Stream<User?> get authStateChanges => _auth.authStateChanges();

  /// Utilisateur actuel (peut √™tre null si d√©connect√©)
  static User? get currentUser => _auth.currentUser;

  /// V√©rifie si un utilisateur est connect√©
  static bool get isUserLoggedIn => currentUser != null;

  /// D√©connecte l'utilisateur actuel
  static Future<void> signOut() async {
    try {
      await _auth.signOut();
      if (kDebugMode) debugPrint('‚úÖ Utilisateur d√©connect√© avec succ√®s');
    } catch (e) {
      if (kDebugMode) debugPrint('‚ùå Erreur lors de la d√©connexion: $e');
      rethrow;
    }
  }

  /// D√©marre un √©couteur global pour synchroniser le profil/sessions d√®s qu'un utilisateur se connecte
  /// - Au login/inscription: lance UserSyncService.startSync()
  /// - √Ä la d√©connexion: lance UserSyncService.stopSync()
  static Future<void> startAuthSync() async {
    // √âviter les doublons d'√©couteurs
    await _authSubscription?.cancel();

    if (kDebugMode) debugPrint('üîä Activation du listener d\'authentification');
    _authSubscription = _auth.authStateChanges().listen((user) async {
      try {
        if (user != null) {
          if (kDebugMode) debugPrint('üë§ Connect√©: ${user.uid} ‚Üí d√©marrage UserOrchestra');
          await UserOrchestra.startForCurrentUser();
        } else {
          if (kDebugMode) debugPrint('üö™ D√©connect√© ‚Üí arr√™t de la synchronisation utilisateur');
          UserOrchestra.stop();
        }
      } catch (e) {
        if (kDebugMode) debugPrint('‚ùå Erreur dans le listener d\'auth: $e');
      }
    });

    // D√©marrage imm√©diat au cas o√π un utilisateur est d√©j√† connect√©
    final current = _auth.currentUser;
    if (current != null) {
      try {
        if (kDebugMode) debugPrint('‚ö° D√©marrage imm√©diat UserOrchestra (utilisateur d√©j√† connect√©: ${current.uid})');
        await UserOrchestra.startForCurrentUser();
      } catch (e) {
        if (kDebugMode) debugPrint('‚ùå Erreur lors du d√©marrage imm√©diat: $e');
      }
    }
  }

  /// Arr√™te le listener global d'authentification (√† appeler si n√©cessaire au dispose global)
  static Future<void> stopAuthSync() async {
    if (kDebugMode) debugPrint('üõë D√©sactivation du listener d\'authentification');
    await _authSubscription?.cancel();
    _authSubscription = null;
  }

  /// Obtient l'ID de l'utilisateur actuel
  static String? get currentUserId => currentUser?.uid;

  /// Obtient l'email de l'utilisateur actuel
  static String? get currentUserEmail => currentUser?.email;

  /// V√©rifie si l'utilisateur est connect√© de mani√®re anonyme
  static bool get isAnonymous => currentUser?.isAnonymous ?? false;

  /// √âcoute les changements d'√©tat d'authentification avec un callback
  /// 
  /// [onAuthStateChanged] : Callback appel√© √† chaque changement d'√©tat
  /// Retourne un StreamSubscription pour pouvoir annuler l'√©coute
  static Stream<User?> listenToAuthChanges() {
    return authStateChanges;
  }

  /// V√©rifie si l'utilisateur a un email v√©rifi√©
  static bool get isEmailVerified => currentUser?.emailVerified ?? false;

  /// Envoie un email de v√©rification
  static Future<void> sendEmailVerification() async {
    try {
      await currentUser?.sendEmailVerification();
      if (kDebugMode) debugPrint('‚úÖ Email de v√©rification envoy√©');
    } catch (e) {
      if (kDebugMode) debugPrint('‚ùå Erreur lors de l\'envoi de l\'email de v√©rification: $e');
      rethrow;
    }
  }

  /// Supprime le compte utilisateur actuel
  static Future<void> deleteAccount() async {
    try {
      await currentUser?.delete();
      if (kDebugMode) debugPrint('‚úÖ Compte utilisateur supprim√©');
    } catch (e) {
      if (kDebugMode) debugPrint('‚ùå Erreur lors de la suppression du compte: $e');
      rethrow;
    }
  }

  /// Met √† jour le mot de passe de l'utilisateur
  static Future<void> updatePassword(String newPassword) async {
    try {
      await currentUser?.updatePassword(newPassword);
      if (kDebugMode) debugPrint('‚úÖ Mot de passe mis √† jour');
    } catch (e) {
      if (kDebugMode) debugPrint('‚ùå Erreur lors de la mise √† jour du mot de passe: $e');
      rethrow;
    }
  }

  /// Met √† jour l'email de l'utilisateur
  static Future<void> updateEmail(String newEmail) async {
    try {
      await currentUser?.verifyBeforeUpdateEmail(newEmail);
      if (kDebugMode) debugPrint('‚úÖ Email de v√©rification envoy√© pour mise √† jour');
    } catch (e) {
      if (kDebugMode) debugPrint('‚ùå Erreur lors de la mise √† jour de l\'email: $e');
      rethrow;
    }
  }

  /// Obtient les informations du profil utilisateur
  static Map<String, dynamic>? get userProfile {
    final user = currentUser;
    if (user == null) return null;

    return {
      'uid': user.uid,
      'email': user.email,
      'displayName': user.displayName,
      'photoURL': user.photoURL,
      'emailVerified': user.emailVerified,
      'isAnonymous': user.isAnonymous,
      'creationTime': user.metadata.creationTime?.toIso8601String(),
      'lastSignInTime': user.metadata.lastSignInTime?.toIso8601String(),
    };
  }

  /// V√©rifie si l'utilisateur a √©t√© cr√©√© r√©cemment (dans les derni√®res 24h)
  static bool get isNewUser {
    final user = currentUser;
    if (user == null) return false;

    final creationTime = user.metadata.creationTime;
    if (creationTime == null) return false;

    final now = DateTime.now();
    final difference = now.difference(creationTime);
    
    return difference.inHours < 24;
  }

  /// Obtient le temps √©coul√© depuis la derni√®re connexion
  static Duration? get timeSinceLastSignIn {
    final user = currentUser;
    if (user == null) return null;

    final lastSignInTime = user.metadata.lastSignInTime;
    if (lastSignInTime == null) return null;

    final now = DateTime.now();
    return now.difference(lastSignInTime);
  }




} 