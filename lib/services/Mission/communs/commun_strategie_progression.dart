import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/foundation.dart';
import '../../../models/mission.dart';

/// Service pour initialiser et g√©rer la progression des missions
class MissionProgressionInitService {
  static final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  static final FirebaseAuth _auth = FirebaseAuth.instance;

  /// Initialise la progression d'une mission si elle n'existe pas encore
  static Future<void> initializeMissionProgress(String missionId, {
    required String biome,
    required int index,
    bool forceUnlock = false,
  }) async {
    try {
      final user = _auth.currentUser;
      if (user == null) {
        if (kDebugMode) debugPrint('‚ö†Ô∏è Aucun utilisateur connect√© pour initialiser la progression');
        return;
      }

      final progressRef = _firestore
          .collection('utilisateurs')
          .doc(user.uid)
          .collection('progression_missions')
          .doc(missionId);

      // V√©rifier si la progression existe d√©j√†
      final doc = await progressRef.get();
      
      if (!doc.exists) {
        // Cr√©er la progression initiale
        final initialData = {
          'etoiles': 0,
          'meilleurScore': 0,
          'tentatives': 0,
          'deverrouille': forceUnlock || index == 1, // Premi√®re mission toujours d√©verrouill√©e
          'biome': biome,
          'index': index,
          'creeLe': FieldValue.serverTimestamp(),
          'derniereMiseAJour': FieldValue.serverTimestamp(),
        };

        await progressRef.set(initialData);
        
        if (kDebugMode) {
          debugPrint('üéØ Progression initialis√©e pour $missionId (d√©verrouill√©e: ${initialData['deverrouille']})');
        }
      } else {
        if (kDebugMode) {
          debugPrint('‚ÑπÔ∏è Progression d√©j√† existante pour $missionId');
        }
      }
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå Erreur lors de l\'initialisation de la progression pour $missionId: $e');
      }
    }
  }

  /// Initialise la progression pour toutes les missions d'un biome
  static Future<void> initializeBiomeProgress(String biome, List<Mission> missions) async {
    if (kDebugMode) {
      debugPrint('üîÑ Initialisation de la progression pour le biome $biome (${missions.length} missions)');
    }

    for (final mission in missions) {
      // Seule la premi√®re mission est d√©verrouill√©e et initialis√©e
      if (mission.index == 1) {
        await initializeMissionProgress(
          mission.id,
          biome: biome,
          index: mission.index,
          forceUnlock: true, // Premi√®re mission toujours d√©verrouill√©e
        );
      }
      // Les autres missions ne sont PAS initialis√©es - elles seront cr√©√©es quand d√©verrouill√©es
    }

    if (kDebugMode) {
      debugPrint('‚úÖ Progression initialis√©e pour le biome $biome (seulement U01)');
    }
  }

  /// V√©rifie si une mission est d√©verrouill√©e
  static Future<bool> isMissionUnlocked(String missionId) async {
    try {
      final user = _auth.currentUser;
      if (user == null) return false;

      final doc = await _firestore
          .collection('utilisateurs')
          .doc(user.uid)
          .collection('progression_missions')
          .doc(missionId)
          .get();

      if (doc.exists) {
        final data = doc.data() as Map<String, dynamic>;
        return data['deverrouille'] ?? false;
      }
      
      return false;
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå Erreur lors de la v√©rification du d√©verrouillage de $missionId: $e');
      }
      return false;
    }
  }

  /// D√©verrouille une mission et cr√©e sa progression si n√©cessaire
  static Future<void> unlockMission(String missionId, {
    required String biome,
    required int index,
  }) async {
    try {
      final user = _auth.currentUser;
      if (user == null) return;

      final progressRef = _firestore
          .collection('utilisateurs')
          .doc(user.uid)
          .collection('progression_missions')
          .doc(missionId);

      // V√©rifier si la progression existe d√©j√†
      final doc = await progressRef.get();
      
      if (!doc.exists) {
        // Cr√©er la progression au moment du d√©verrouillage
        await progressRef.set({
          'etoiles': 0,
          'meilleurScore': 0,
          'tentatives': 0,
          'deverrouille': true,
          'biome': biome,
          'index': index,
          'deverrouilleLe': FieldValue.serverTimestamp(), // Date de d√©verrouillage
          'creeLe': FieldValue.serverTimestamp(),
          'derniereMiseAJour': FieldValue.serverTimestamp(),
        });
        
        if (kDebugMode) {
          debugPrint('üîì Mission $missionId d√©verrouill√©e et progression cr√©√©e');
        }
      } else {
        // Mettre √† jour la progression existante
        await progressRef.update({
          'deverrouille': true,
          'deverrouilleLe': FieldValue.serverTimestamp(), // Date de d√©verrouillage
          'derniereMiseAJour': FieldValue.serverTimestamp(),
        });
        
        if (kDebugMode) {
          debugPrint('üîì Mission $missionId d√©verrouill√©e (progression existante)');
        }
      }
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå Erreur lors du d√©verrouillage de $missionId: $e');
      }
    }
  }
}
