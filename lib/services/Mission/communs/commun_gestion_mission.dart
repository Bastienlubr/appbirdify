import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/foundation.dart';


/// Service complet pour la gestion des missions et leurs statistiques
class MissionManagementService {
  static final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  static final FirebaseAuth _auth = FirebaseAuth.instance;

  /// Met √† jour compl√®tement la progression d'une mission apr√®s un quiz
  static Future<void> updateMissionProgress({
    required String missionId,
    required int score,
    required int totalQuestions,
    // required List<Map<String, dynamic>> reponses, // Ce param√®tre sera modifi√© ou supprim√©
    required Duration dureePartie,
    required List<String> wrongBirds, // Nouveau param√®tre pour les oiseaux manqu√©s
  }) async {
    try {
      if (kDebugMode) {
        debugPrint('üîß MissionManagementService.updateMissionProgress appel√©');
        debugPrint('   Mission ID: $missionId');
        debugPrint('   Score: $score/$totalQuestions');
        debugPrint('   Dur√©e: ${dureePartie.inSeconds}s');
        debugPrint('   üîç D√©but du traitement...');
      }

      final user = _auth.currentUser;
      if (user == null) {
        if (kDebugMode) debugPrint('‚ö†Ô∏è Aucun utilisateur connect√©');
        return;
      }

      final uid = user.uid;
      if (kDebugMode) {
        debugPrint('üë§ Utilisateur connect√©: $uid');
        debugPrint('   üîç Connexion Firebase OK');
      }

      final progressRef = _firestore
          .collection('utilisateurs')
          .doc(uid)
          .collection('progression_missions')
          .doc(missionId);

      // R√©cup√©rer la progression actuelle
      if (kDebugMode) {
        debugPrint('   üîç R√©cup√©ration de la progression existante...');
      }
      
      final doc = await progressRef.get();
      final Map<String, dynamic> currentData = doc.exists ? doc.data()! : {};
      
      if (kDebugMode) {
        debugPrint('   üìä Progression existante:');
        debugPrint('      - Existe: ${doc.exists}');
        if (doc.exists) {
          debugPrint('      - √âtoiles actuelles: ${currentData['etoiles'] ?? 0}');
          debugPrint('      - Tentatives: ${currentData['tentatives'] ?? 0}');
        }
      }

      // Calculer les nouvelles statistiques
      final int anciennesTentatives = currentData['tentatives'] ?? 0;
      final int anciennesEtoiles = currentData['etoiles'] ?? 0;

      // Calculer le score en pourcentage (toujours utile pour la moyenne)
      final int scorePourcentage = ((score / totalQuestions) * 100).round();

      // Calculer les nouvelles √©toiles (syst√®me progressif)
      final int nouvellesEtoiles = calculateStars(score, totalQuestions, anciennesEtoiles);

      if (kDebugMode) {
        debugPrint('   üåü Calcul des √©toiles:');
        debugPrint('      - Score: $score/$totalQuestions');
        debugPrint('      - Ratio: ${(score / totalQuestions).toStringAsFixed(2)}');
        debugPrint('      - Nouvelles √©toiles: $nouvellesEtoiles');
        debugPrint('      - Anciennes √©toiles: $anciennesEtoiles');
      }

      // G√©rer l'historique des oiseaux manqu√©s (scoresHistorique)
      // G√©rer la migration depuis l'ancien format List vers le nouveau format Map
      Map<String, dynamic> oiseauxManquesHistorique;
      if (currentData['scoresHistorique'] is List) {
        // Migration depuis l'ancien format List
        if (kDebugMode) {
          debugPrint('   üîÑ Migration de scoresHistorique: List ‚Üí Map');
        }
        oiseauxManquesHistorique = <String, dynamic>{};
      } else {
        // Nouveau format Map
        oiseauxManquesHistorique = Map<String, dynamic>.from(currentData['scoresHistorique'] ?? {});
      }
      
      for (final bird in wrongBirds) {
        oiseauxManquesHistorique[bird] = (oiseauxManquesHistorique[bird] ?? 0) + 1;
      }

      // Calculer la moyenne des scores de fa√ßon incr√©mentale (sans stocker la liste des pourcentages)
      final double ancienneMoyenne = (currentData['moyenneScores'] is num)
          ? (currentData['moyenneScores'] as num).toDouble()
          : 0.0;
      final int nouveauNombreTentatives = anciennesTentatives + 1;
      final double moyenneScores =
          ((ancienneMoyenne * anciennesTentatives) + scorePourcentage) / (nouveauNombreTentatives == 0 ? 1 : nouveauNombreTentatives);

      if (kDebugMode) {
        debugPrint('   üìà Calcul des moyennes:');
        debugPrint('      - Oiseaux manqu√©s (fr√©quence): $oiseauxManquesHistorique');
        debugPrint('      - Moyenne scores: ${moyenneScores.toStringAsFixed(1)}%');
      }

      // Pr√©parer les donn√©es de mise √† jour
      final Map<String, dynamic> updateData = {
        'tentatives': nouveauNombreTentatives,
        'dernierePartieLe': FieldValue.serverTimestamp(),
        'scoresHistorique': oiseauxManquesHistorique, // Maintenant stocke les oiseaux manqu√©s
        'moyenneScores': double.parse(moyenneScores.toStringAsFixed(1)),
      };

      if (kDebugMode) {
        debugPrint('   üìã Donn√©es √† mettre √† jour:');
        debugPrint('      - Tentatives: ${anciennesTentatives + 1} (√©tait $anciennesTentatives)');
        debugPrint('      - Moyenne scores: ${updateData['moyenneScores']}%');
        debugPrint('      - Oiseaux manqu√©s: ${updateData['scoresHistorique']}');
      }

      // Mettre √† jour les √©toiles si de nouvelles ont √©t√© gagn√©es
      if (nouvellesEtoiles > anciennesEtoiles) {
        updateData['etoiles'] = nouvellesEtoiles;
        updateData['etoilesGagneesLe'] = FieldValue.serverTimestamp();

        if (kDebugMode) {
          debugPrint('üåü Nouvelles √©toiles gagn√©es pour $missionId: $anciennesEtoiles ‚Üí $nouvellesEtoiles');
          
          // Expliquer le syst√®me progressif
          if (nouvellesEtoiles == 1) {
            debugPrint('   üéØ 1√®re √©toile obtenue ! (8/10 minimum)');
          } else if (nouvellesEtoiles == 2) {
            debugPrint('   üéØ 2√®me √©toile obtenue ! (8/10 minimum)');
            debugPrint('   üîì La mission suivante sera d√©verrouill√©e !');
          } else if (nouvellesEtoiles == 3) {
            debugPrint('   üéØ 3√®me √©toile obtenue ! (10/10 parfait requis)');
          }
        }
      }

      // Mettre √† jour ou cr√©er la progression
      if (doc.exists) {
        if (kDebugMode) {
          debugPrint('üìä Progression existante trouv√©e pour $missionId, mise √† jour...');
        }
        await progressRef.update(updateData);
        if (kDebugMode) {
          debugPrint('‚úÖ Progression mise √† jour pour $missionId');
        }
      } else {
        // Cr√©er une nouvelle progression (pas de champ creeLe pour √©viter les doublons avec derniereMiseAJour)
        if (kDebugMode) {
          debugPrint('üéØ Aucune progression existante, cr√©ation d\'une nouvelle pour $missionId...');
        }
        updateData['deverrouille'] = true;
        updateData['etoiles'] = nouvellesEtoiles; // Initialiser les √©toiles lors de la cr√©ation
        await progressRef.set(updateData);
        if (kDebugMode) {
          debugPrint('‚úÖ Nouvelle progression cr√©√©e pour $missionId');
        }
      }

      // Cr√©er une session pour l'historique (les logs seront ajust√©s apr√®s)
      await _createSession(uid, missionId, score, totalQuestions, wrongBirds, dureePartie);

      // V√©rifier si la mission suivante peut √™tre d√©verrouill√©e (2√®me √©toile)
      if (nouvellesEtoiles >= 2 && anciennesEtoiles < 2) {
        if (kDebugMode) {
          debugPrint('üîì D√©verrouillage automatique de la mission suivante (2√®me √©toile obtenue)');
        }
        await _checkAndUnlockNextMission(uid, missionId);
      }

      if (kDebugMode) {
        debugPrint('‚úÖ Mission $missionId mise √† jour compl√®tement');
        debugPrint('   Score: $score/$totalQuestions ($scorePourcentage%)');
        debugPrint('   √âtoiles: $nouvellesEtoiles');
        debugPrint('   Tentatives: ${anciennesTentatives + 1}');
        debugPrint('   Moyenne: ${updateData['moyenneScores']}%');
      }

    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå Erreur lors de la mise √† jour de la mission $missionId: $e');
      }
      rethrow;
    }
  }

  /// Calcule le nombre d'√©toiles bas√© sur le score et les √©toiles actuelles
  static int calculateStars(int score, int total, int currentStars) {
    if (total == 0) return currentStars;
    final double ratio = score / total;
    
    if (kDebugMode) {
      debugPrint('   üéØ Calcul √©toiles: score=$score/$total, ratio=${ratio.toStringAsFixed(2)}, √©toiles actuelles=$currentStars');
    }
    
    // Logique progressive des √©toiles
    if (ratio >= 0.8) { // 8/10 ou 9/10
      if (currentStars == 0) {
        if (kDebugMode) debugPrint('      ‚úÖ 1√®re √©toile obtenue (‚â•8/10)');
        return 1; // Premi√®re √©toile
      } else if (currentStars == 1) {
        if (kDebugMode) debugPrint('      ‚úÖ 2√®me √©toile obtenue (‚â•8/10)');
        return 2; // Deuxi√®me √©toile
      } else if (currentStars == 2 && ratio == 1.0) {
        if (kDebugMode) debugPrint('      ‚úÖ 3√®me √©toile obtenue (10/10 parfait)');
        return 3; // Troisi√®me √©toile (seulement avec 10/10)
      } else {
        if (kDebugMode) debugPrint('      ‚è∏Ô∏è Garde les √©toiles actuelles ($currentStars)');
        return currentStars; // Garde les √©toiles actuelles
      }
    }
    
    // Score insuffisant (< 8/10), garde les √©toiles actuelles
    if (kDebugMode) debugPrint('      ‚ùå Score insuffisant (<8/10), garde $currentStars √©toiles');
    return currentStars;
  }

  /// Cr√©e une session pour l'historique
  static Future<void> _createSession(
    String uid,
    String missionId,
    int score,
    int totalQuestions,
    List<String> wrongBirds,
    Duration dureePartie,
  ) async {
    try {
      final sessionRef = _firestore
          .collection('utilisateurs')
          .doc(uid)
          .collection('sessions')
          .doc();

      await sessionRef.set({
        'idMission': missionId,
        'score': score,
        'totalQuestions': totalQuestions,
        'oiseauxManques': wrongBirds, // Renomm√© pour plus de clart√©
        'dureePartie': dureePartie.inSeconds,
        'commenceLe': FieldValue.serverTimestamp(),
        'termineLe': FieldValue.serverTimestamp(),
        // Supprim√©: reponsesCorrectes, reponsesIncorrectes, tauxReussite
      });

      if (kDebugMode) {
        debugPrint('üìù Session cr√©√©e pour $missionId (score: $score/$totalQuestions)');
      }
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ö†Ô∏è Erreur lors de la cr√©ation de la session: $e');
      }
    }
  }

  /// V√©rifie et d√©verrouille la mission suivante si possible
  static Future<void> _checkAndUnlockNextMission(String uid, String currentMissionId) async {
    try {
      // Extraire le biome et l'index de la mission actuelle
      final biome = currentMissionId[0]; // U01 ‚Üí U, F02 ‚Üí F
      final currentIndex = int.parse(currentMissionId.substring(1));
      final nextMissionId = '$biome${(currentIndex + 1).toString().padLeft(2, '0')}';

      // V√©rifier si la mission suivante existe
      final nextMissionRef = _firestore
          .collection('utilisateurs')
          .doc(uid)
          .collection('progression_missions')
          .doc(nextMissionId);

      final nextMissionDoc = await nextMissionRef.get();
      
      if (!nextMissionDoc.exists) {
        // Cr√©er la progression pour la mission suivante
        await nextMissionRef.set({
          'etoiles': 0,
          'tentatives': 0,
          'deverrouille': true,
          'biome': biome,
          'index': currentIndex + 1,
          'deverrouilleLe': FieldValue.serverTimestamp(),
          'creeLe': FieldValue.serverTimestamp(),
          'derniereMiseAJour': FieldValue.serverTimestamp(),
          'deverrouillePar': currentMissionId, // Mission qui a permis le d√©verrouillage
          'scoresHistorique': {}, // Map vide pour les oiseaux manqu√©s
          'moyenneScores': 0.0, // Moyenne √† 0
        });

        if (kDebugMode) {
          debugPrint('üîì Mission suivante $nextMissionId d√©verrouill√©e automatiquement');
          debugPrint('   üìç D√©verrouill√©e par: $currentMissionId (2√®me √©toile obtenue)');
          debugPrint('   üéØ Pr√™te √† √™tre jou√©e avec 0 √©toiles');
        }
      } else {
        if (kDebugMode) {
          debugPrint('‚ÑπÔ∏è Mission suivante $nextMissionId existe d√©j√†');
        }
      }
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ö†Ô∏è Erreur lors du d√©verrouillage de la mission suivante: $e');
      }
    }
  }

  /// Obtient les statistiques compl√®tes d'une mission
  static Future<Map<String, dynamic>?> getMissionStats(String missionId) async {
    try {
      final user = _auth.currentUser;
      if (user == null) return null;

      final doc = await _firestore
          .collection('utilisateurs')
          .doc(user.uid)
          .collection('progression_missions')
          .doc(missionId)
          .get();

      if (doc.exists) {
        return doc.data();
      }
      return null;
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå Erreur lors de la r√©cup√©ration des stats de $missionId: $e');
      }
      return null;
    }
  }

  /// Obtient toutes les sessions d'une mission
  static Future<List<Map<String, dynamic>>> getMissionSessions(String missionId) async {
    try {
      final user = _auth.currentUser;
      if (user == null) return [];

      final snapshot = await _firestore
          .collection('utilisateurs')
          .doc(user.uid)
          .collection('sessions')
          .where('idMission', isEqualTo: missionId)
          .orderBy('termineLe', descending: true)
          .get();

      return snapshot.docs.map((doc) => doc.data()).toList();
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå Erreur lors de la r√©cup√©ration des sessions de $missionId: $e');
      }
      return [];
    }
  }

  /// Obtient les statistiques globales de l'utilisateur
  static Future<Map<String, dynamic>> getUserGlobalStats() async {
    try {
      final user = _auth.currentUser;
      if (user == null) return {};

      final missionsSnapshot = await _firestore
          .collection('utilisateurs')
          .doc(user.uid)
          .collection('progression_missions')
          .get();

      final sessionsSnapshot = await _firestore
          .collection('utilisateurs')
          .doc(user.uid)
          .collection('sessions')
          .get();

      int totalMissions = 0;
      int totalEtoiles = 0;
      int totalTentatives = 0;
      double totalScoreMoyen = 0;
      int missionsTerminees = 0;

      for (final doc in missionsSnapshot.docs) {
        final data = doc.data();
        totalMissions++;
        totalEtoiles += (data['etoiles'] ?? 0) as int;
        totalTentatives += (data['tentatives'] ?? 0) as int;
        totalScoreMoyen += (data['moyenneScores'] ?? 0.0) as double;
        
        if ((data['etoiles'] ?? 0) >= 2) {
          missionsTerminees++;
        }
      }

      final scoreMoyenGlobal = totalMissions > 0 ? totalScoreMoyen / totalMissions : 0;

      return {
        'totalMissions': totalMissions,
        'totalEtoiles': totalEtoiles,
        'totalTentatives': totalTentatives,
        'scoreMoyenGlobal': double.parse(scoreMoyenGlobal.toStringAsFixed(1)),
        'missionsTerminees': missionsTerminees,
        'totalSessions': sessionsSnapshot.docs.length,
        // Supprim√©: tauxReussiteGlobal (calcul√© √† partir de missionsTerminees)
      };
    } catch (e) {
      if (kDebugMode) {
        debugPrint('‚ùå Erreur lors de la r√©cup√©ration des stats globales: $e');
      }
      return {};
    }
  }
}
