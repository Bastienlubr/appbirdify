import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_app_check/firebase_app_check.dart';
import 'firebase_options.dart';
import 'pages/home_screen.dart';
import 'services/Users/auth_service.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  // Forcer l'orientation en mode portrait uniquement
  await SystemChrome.setPreferredOrientations([
    DeviceOrientation.portraitUp,
    DeviceOrientation.portraitDown,
  ]);
  
  // Initialisation Firebase avec gestion d'erreur robuste
  try {
    await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);
    debugPrint('‚úÖ Firebase initialis√© avec succ√®s');
  } catch (e) {
  // App Check (Debug pour tests locaux; passe √† PlayIntegrity/DeviceCheck en prod)
  try {
    await FirebaseAppCheck.instance.activate(
      androidProvider: AndroidProvider.debug,
      appleProvider: AppleProvider.debug,
    );
    debugPrint('üõ°Ô∏è Firebase App Check activ√© (mode debug)');
  } catch (e) {
    debugPrint('‚ö†Ô∏è App Check non activ√©: $e');
  }
    debugPrint('‚ùå Erreur lors de l\'initialisation Firebase: $e');
    // En cas d'√©chec d'initialisation Firebase, on continue quand m√™me
    // pour permettre √† l'app de fonctionner en mode hors ligne
  }
  // D√©marrer l'√©couteur d'auth pour synchroniser automatiquement le profil utilisateur
  await AuthService.startAuthSync();
  
  // (Supprim√©) Initialisation du scan d'images locales au d√©marrage
  
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Birdify',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: const Color(0xFF386641)),
        fontFamily: 'Quicksand',
      ),
      home: const HomeScreen(),
    );
  }
}
