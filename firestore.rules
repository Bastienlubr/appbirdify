rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helpers
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(uid) {
      return isSignedIn() && request.auth.uid == uid;
    }

    // Certains jeux de données ont "approuvee", d'autres "publiée"
    function isApproved() {
      return
        (("statut" in resource.data) &&
         (resource.data.statut == "approuvee" || resource.data.statut == "publiée"));
    }

    // ---- CONTENU PUBLIC (lecture contrôlée) ----
    // Compat : deux noms possibles selon le code/époque (Cursor peut utiliser "missions")
    match /missionsPubliques/{missionId} {
      // Lecture publique uniquement si approuvée
      allow read: if isApproved();
      // Pas d'écriture côté client (Admin SDK uniquement)
      allow write: if false;
    }

    match /missions/{missionId} {
      // Même logique si le projet/code utilise "missions"
      allow read: if isApproved();
      allow write: if false;
    }

    // ---- QUIZ VARIÉ (lecture publique) ----
    // Règle générique pour la collection dont le nom contient un espace/accents
    match /{colName}/{quizId} {
      allow read: if colName == "Quiz varié";
      allow write: if false;
    }

    // Banque de sons : lecture réservée aux utilisateurs connectés (comme la version Cursor)
    match /sons_oiseaux/{id} {
      allow read: if isSignedIn();
      allow write: if false;
    }

    // ---- FICHES OISEAUX (lecture publique pour l'app) ----
    match /fiches_oiseaux/{id} {
      allow read: if true;
      allow write: if false;

      // Sous-collections panels (lecture publique uniquement)
      match /{panelCollection}/{docId} {
        allow read: if panelCollection in ['identification','habitat','alimentation','reproduction','protection'] && docId == 'current';
        allow write: if false;
      }
    }

    // ---- DONNÉES UTILISATEUR ----
    match /utilisateurs/{uid} {
      // Le propriétaire peut lire son doc racine
      allow read: if isOwner(uid);

      // Création autorisée par le propriétaire
      allow create: if isOwner(uid);

      // Mise à jour autorisée sauf champ sensible 'abonnement' (réservé au backend/Admin SDK)
      allow update: if isOwner(uid)
                    && !('abonnement' in request.resource.data.diff(resource.data).changedKeys())
                    // Interdire le changement du statut premium depuis le client
                    && !(request.resource.data.profil.estPremium != resource.data.profil.estPremium);

      // Suppression client interdite
      allow delete: if false;

      // Diagnostics abonnement (historique de logs)
      match /diagnostics/abonnement/logs/{logId} {
        allow read, create: if isOwner(uid);
        allow update, delete: if false;
      }

      // Nouvelle structure abonnement: état courant + historique
      match /abonnement/{docId} {
        allow read: if isOwner(uid);
        allow create, update: if isOwner(uid);
        allow delete: if false;
        // Sous-collection cycles historique
        match /cycles/{cycleId} {
          allow read: if isOwner(uid);
          allow create, update: if isOwner(uid);
          allow delete: if false;
        }
      }

      // ...et tout sous-document / sous-collection
      match /{subpath=**} {
        allow read: if isOwner(uid);
        allow create, update: if isOwner(uid);
        allow delete: if false;
      }
    }

    // ---- QUIZ PERSONNALISÉS ----
    match /users/{uid} {
      // Le propriétaire peut lire son doc racine
      allow read: if isOwner(uid);
      // Création/Mise à jour autorisées par le propriétaire
      allow create, update: if isOwner(uid);
      // Suppression client interdite
      allow delete: if false;

      // Collection des quiz personnalisés de l'utilisateur
      match /custom_quiz/{quizId} {
        allow read, write: if isOwner(uid);
      }

      // ...et tout autre sous-document / sous-collection
      match /{subpath=**} {
        allow read: if isOwner(uid);
        allow create, update: if isOwner(uid);
        allow delete: if false;
      }
    }

    // ---- HISTORIQUE DE QUIZ (racine) ----
    match /tentativesQuiz/{attemptId} {
      // Création par le propriétaire uniquement
      allow create: if isSignedIn() &&
                    (request.resource.data.idUtilisateur == request.auth.uid);

      // Lecture par le propriétaire uniquement
      allow read: if isSignedIn() &&
                  (resource.data.idUtilisateur == request.auth.uid);

      // Pas de mise à jour ni suppression côté client (immutables)
      allow update, delete: if false;
    }
  }
}